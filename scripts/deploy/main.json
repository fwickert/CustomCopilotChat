{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.20.4.51522",
      "templateHash": "6091974935920125454"
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "defaultValue": "copichat",
      "metadata": {
        "description": "Name for the deployment consisting of alphanumeric characters or dashes ('-')"
      }
    },
    "webAppServiceSku": {
      "type": "string",
      "defaultValue": "B1",
      "allowedValues": [
        "B1",
        "S1",
        "S2",
        "S3",
        "P1V3",
        "P2V3",
        "I1V2",
        "I2V2"
      ],
      "metadata": {
        "description": "SKU for the Azure App Service plan"
      }
    },
    "packageUri": {
      "type": "string",
      "defaultValue": "https://aka.ms/copilotchat/webapi/latest",
      "metadata": {
        "description": "Location of package to deploy as the web service"
      }
    },
    "aiService": {
      "type": "string",
      "defaultValue": "AzureOpenAI",
      "allowedValues": [
        "AzureOpenAI",
        "OpenAI"
      ],
      "metadata": {
        "description": "Underlying AI service"
      }
    },
    "completionModel": {
      "type": "string",
      "defaultValue": "gpt-35-turbo",
      "metadata": {
        "description": "Model to use for chat completions"
      }
    },
    "embeddingModel": {
      "type": "string",
      "defaultValue": "text-embedding-ada-002",
      "metadata": {
        "description": "Model to use for text embeddings"
      }
    },
    "plannerModel": {
      "type": "string",
      "defaultValue": "gpt-35-turbo",
      "metadata": {
        "description": "Completion model the task planner should use"
      }
    },
    "aiEndpoint": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Azure OpenAI endpoint to use (Azure OpenAI only)"
      }
    },
    "aiApiKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Azure OpenAI or OpenAI API key"
      }
    },
    "webApiClientId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Azure AD client ID for the backend web API"
      }
    },
    "azureAdTenantId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Azure AD tenant ID for authenticating users"
      }
    },
    "azureAdInstance": {
      "type": "string",
      "defaultValue": "[environment().authentication.loginEndpoint]",
      "metadata": {
        "description": "Azure AD cloud instance for authenticating users"
      }
    },
    "deployNewAzureOpenAI": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to deploy a new Azure OpenAI instance"
      }
    },
    "deployCosmosDB": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to deploy Cosmos DB for persistent chat storage"
      }
    },
    "memoryStore": {
      "type": "string",
      "defaultValue": "Volatile",
      "allowedValues": [
        "Volatile",
        "AzureCognitiveSearch",
        "Qdrant",
        "Postgres"
      ],
      "metadata": {
        "description": "What method to use to persist embeddings"
      }
    },
    "deploySpeechServices": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to deploy Azure Speech Services to enable input by voice"
      }
    },
    "deployWebApiPackage": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to deploy the backend Web API package"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Region for the resources"
      }
    },
    "webappLocation": {
      "type": "string",
      "defaultValue": "westus2",
      "metadata": {
        "description": "Region for the webapp frontend"
      }
    },
    "sqlAdminPassword": {
      "type": "securestring",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "PostgreSQL admin password"
      }
    }
  },
  "variables": {
    "rgIdHash": "[uniqueString(resourceGroup().id)]",
    "uniqueName": "[format('{0}-{1}', parameters('name'), variables('rgIdHash'))]",
    "storageFileShareName": "aciqdrantshare"
  },
  "resources": [
    {
      "condition": "[equals(parameters('memoryStore'), 'Qdrant')]",
      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}/{1}/{2}', format('st{0}', variables('rgIdHash')), 'default', variables('storageFileShareName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/fileServices', format('st{0}', variables('rgIdHash')), 'default')]"
      ]
    },
    {
      "condition": "[equals(parameters('memoryStore'), 'Qdrant')]",
      "type": "Microsoft.Storage/storageAccounts/fileServices",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}/{1}', format('st{0}', variables('rgIdHash')), 'default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', format('st{0}', variables('rgIdHash')))]"
      ]
    },
    {
      "condition": "[parameters('deployNewAzureOpenAI')]",
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2022-12-01",
      "name": "[format('ai-{0}', variables('uniqueName'))]",
      "location": "[parameters('location')]",
      "kind": "OpenAI",
      "sku": {
        "name": "S0"
      },
      "properties": {
        "customSubDomainName": "[toLower(variables('uniqueName'))]"
      }
    },
    {
      "condition": "[parameters('deployNewAzureOpenAI')]",
      "type": "Microsoft.CognitiveServices/accounts/deployments",
      "apiVersion": "2022-12-01",
      "name": "[format('{0}/{1}', format('ai-{0}', variables('uniqueName')), parameters('completionModel'))]",
      "properties": {
        "model": {
          "format": "OpenAI",
          "name": "[parameters('completionModel')]"
        },
        "scaleSettings": {
          "scaleType": "Standard"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.CognitiveServices/accounts', format('ai-{0}', variables('uniqueName')))]"
      ]
    },
    {
      "condition": "[parameters('deployNewAzureOpenAI')]",
      "type": "Microsoft.CognitiveServices/accounts/deployments",
      "apiVersion": "2022-12-01",
      "name": "[format('{0}/{1}', format('ai-{0}', variables('uniqueName')), parameters('embeddingModel'))]",
      "properties": {
        "model": {
          "format": "OpenAI",
          "name": "[parameters('embeddingModel')]"
        },
        "scaleSettings": {
          "scaleType": "Standard"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.CognitiveServices/accounts', format('ai-{0}', variables('uniqueName')))]",
        "[resourceId('Microsoft.CognitiveServices/accounts/deployments', format('ai-{0}', variables('uniqueName')), parameters('completionModel'))]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-03-01",
      "name": "[format('asp-{0}-webapi', variables('uniqueName'))]",
      "location": "[parameters('location')]",
      "kind": "app",
      "sku": {
        "name": "[parameters('webAppServiceSku')]"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-09-01",
      "name": "[format('app-{0}-webapi', variables('uniqueName'))]",
      "location": "[parameters('location')]",
      "kind": "app",
      "tags": {
        "skweb": "1"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('asp-{0}-webapi', variables('uniqueName')))]",
        "httpsOnly": true,
        "virtualNetworkSubnetId": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', variables('uniqueName'))), '2021-05-01').subnets[0].id]",
        "siteConfig": {
          "healthCheckPath": "/healthz"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', format('asp-{0}-webapi', variables('uniqueName')))]",
        "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', variables('uniqueName')))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}/{1}', format('app-{0}-webapi', variables('uniqueName')), 'web')]",
      "properties": {
        "alwaysOn": false,
        "cors": {
          "allowedOrigins": [
            "http://localhost:3000",
            "https://localhost:3000"
          ],
          "supportCredentials": true
        },
        "detailedErrorLoggingEnabled": true,
        "minTlsVersion": "1.2",
        "netFrameworkVersion": "v6.0",
        "use32BitWorkerProcess": false,
        "vnetRouteAllEnabled": true,
        "webSocketsEnabled": true,
        "appSettings": [
          {
            "name": "AIService:Type",
            "value": "[parameters('aiService')]"
          },
          {
            "name": "AIService:Endpoint",
            "value": "[if(parameters('deployNewAzureOpenAI'), reference(resourceId('Microsoft.CognitiveServices/accounts', format('ai-{0}', variables('uniqueName'))), '2022-12-01').endpoint, parameters('aiEndpoint'))]"
          },
          {
            "name": "AIService:Key",
            "value": "[if(parameters('deployNewAzureOpenAI'), listKeys(resourceId('Microsoft.CognitiveServices/accounts', format('ai-{0}', variables('uniqueName'))), '2022-12-01').key1, parameters('aiApiKey'))]"
          },
          {
            "name": "AIService:Models:Completion",
            "value": "[parameters('completionModel')]"
          },
          {
            "name": "AIService:Models:Embedding",
            "value": "[parameters('embeddingModel')]"
          },
          {
            "name": "AIService:Models:Planner",
            "value": "[parameters('plannerModel')]"
          },
          {
            "name": "Authentication:Type",
            "value": "AzureAd"
          },
          {
            "name": "Authentication:AzureAd:Instance",
            "value": "[parameters('azureAdInstance')]"
          },
          {
            "name": "Authentication:AzureAd:TenantId",
            "value": "[parameters('azureAdTenantId')]"
          },
          {
            "name": "Authentication:AzureAd:ClientId",
            "value": "[parameters('webApiClientId')]"
          },
          {
            "name": "Authentication:AzureAd:Scopes",
            "value": "access_as_user"
          },
          {
            "name": "ChatStore:Type",
            "value": "[if(parameters('deployCosmosDB'), 'cosmos', 'volatile')]"
          },
          {
            "name": "ChatStore:Cosmos:Database",
            "value": "CopilotChat"
          },
          {
            "name": "ChatStore:Cosmos:ChatSessionsContainer",
            "value": "chatsessions"
          },
          {
            "name": "ChatStore:Cosmos:ChatMessagesContainer",
            "value": "chatmessages"
          },
          {
            "name": "ChatStore:Cosmos:ChatMemorySourcesContainer",
            "value": "chatmemorysources"
          },
          {
            "name": "ChatStore:Cosmos:ChatParticipantsContainer",
            "value": "chatparticipants"
          },
          {
            "name": "ChatStore:Cosmos:ConnectionString",
            "value": "[if(parameters('deployCosmosDB'), listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(format('cosmos-{0}', variables('uniqueName')))), '2023-04-15').connectionStrings[0].connectionString, '')]"
          },
          {
            "name": "MemoryStore:Type",
            "value": "[parameters('memoryStore')]"
          },
          {
            "name": "MemoryStore:Qdrant:Host",
            "value": "[if(equals(parameters('memoryStore'), 'Qdrant'), format('https://{0}', reference(resourceId('Microsoft.Web/sites', format('app-{0}-qdrant', variables('uniqueName'))), '2022-09-01').defaultHostName), '')]"
          },
          {
            "name": "MemoryStore:Qdrant:Port",
            "value": "443"
          },
          {
            "name": "MemoryStore:AzureCognitiveSearch:UseVectorSearch",
            "value": "true"
          },
          {
            "name": "MemoryStore:AzureCognitiveSearch:Endpoint",
            "value": "[if(equals(parameters('memoryStore'), 'AzureCognitiveSearch'), format('https://{0}.search.windows.net', format('acs-{0}', variables('uniqueName'))), '')]"
          },
          {
            "name": "MemoryStore:AzureCognitiveSearch:Key",
            "value": "[if(equals(parameters('memoryStore'), 'AzureCognitiveSearch'), listAdminKeys(resourceId('Microsoft.Search/searchServices', format('acs-{0}', variables('uniqueName'))), '2022-09-01').primaryKey, '')]"
          },
          {
            "name": "MemoryStore:Postgres:ConnectionString",
            "value": "[if(equals(parameters('memoryStore'), 'Postgres'), format('Host={0}:5432;Username=citus;Password={1};Database=citus', reference(resourceId('Microsoft.DBforPostgreSQL/serverGroupsv2', format('pg-{0}', variables('uniqueName'))), '2022-11-08').serverNames[0].fullyQualifiedDomainName, parameters('sqlAdminPassword')), '')]"
          },
          {
            "name": "AzureSpeech:Region",
            "value": "[parameters('location')]"
          },
          {
            "name": "AzureSpeech:Key",
            "value": "[if(parameters('deploySpeechServices'), listKeys(resourceId('Microsoft.CognitiveServices/accounts', format('cog-{0}', variables('uniqueName'))), '2022-12-01').key1, '')]"
          },
          {
            "name": "AllowedOrigins",
            "value": "[[*]"
          },
          {
            "name": "Kestrel:Endpoints:Https:Url",
            "value": "https://localhost:443"
          },
          {
            "name": "Logging:LogLevel:Default",
            "value": "Warning"
          },
          {
            "name": "Logging:LogLevel:CopilotChat.WebApi",
            "value": "Warning"
          },
          {
            "name": "Logging:LogLevel:Microsoft.SemanticKernel",
            "value": "Warning"
          },
          {
            "name": "Logging:LogLevel:Microsoft.AspNetCore.Hosting",
            "value": "Warning"
          },
          {
            "name": "Logging:LogLevel:Microsoft.Hosting.Lifetimel",
            "value": "Warning"
          },
          {
            "name": "ApplicationInsights:ConnectionString",
            "value": "[reference(resourceId('Microsoft.Insights/components', format('appins-{0}', variables('uniqueName'))), '2020-02-02').ConnectionString]"
          },
          {
            "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
            "value": "[reference(resourceId('Microsoft.Insights/components', format('appins-{0}', variables('uniqueName'))), '2020-02-02').ConnectionString]"
          },
          {
            "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
            "value": "~2"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', format('appins-{0}', variables('uniqueName')))]",
        "[resourceId('Microsoft.Web/sites', format('app-{0}-qdrant', variables('uniqueName')))]",
        "[resourceId('Microsoft.Web/sites', format('app-{0}-webapi', variables('uniqueName')))]",
        "[resourceId('Microsoft.Search/searchServices', format('acs-{0}', variables('uniqueName')))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(format('cosmos-{0}', variables('uniqueName'))))]",
        "[resourceId('Microsoft.CognitiveServices/accounts', format('ai-{0}', variables('uniqueName')))]",
        "[resourceId('Microsoft.DBforPostgreSQL/serverGroupsv2', format('pg-{0}', variables('uniqueName')))]",
        "[resourceId('Microsoft.CognitiveServices/accounts', format('cog-{0}', variables('uniqueName')))]"
      ]
    },
    {
      "condition": "[parameters('deployWebApiPackage')]",
      "type": "Microsoft.Web/sites/extensions",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}/{1}', format('app-{0}-webapi', variables('uniqueName')), 'MSDeploy')]",
      "kind": "string",
      "properties": {
        "packageUri": "[parameters('packageUri')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', format('app-{0}-webapi', variables('uniqueName')))]",
        "[resourceId('Microsoft.Web/sites/config', format('app-{0}-webapi', variables('uniqueName')), 'web')]"
      ]
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[format('appins-{0}', variables('uniqueName'))]",
      "location": "[parameters('location')]",
      "kind": "string",
      "tags": {
        "displayName": "AppInsight"
      },
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('la-{0}', variables('uniqueName')))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', format('la-{0}', variables('uniqueName')))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/siteextensions",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}/{1}', format('app-{0}-webapi', variables('uniqueName')), 'Microsoft.ApplicationInsights.AzureWebSites')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', format('app-{0}-webapi', variables('uniqueName')))]",
        "[resourceId('Microsoft.Web/sites/config', format('app-{0}-webapi', variables('uniqueName')), 'web')]"
      ]
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2022-10-01",
      "name": "[format('la-{0}', variables('uniqueName'))]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "Log Analytics"
      },
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 90,
        "features": {
          "searchVersion": 1,
          "legacy": 0,
          "enableLogAccessUsingOnlyResourcePermissions": true
        }
      }
    },
    {
      "condition": "[equals(parameters('memoryStore'), 'Qdrant')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-09-01",
      "name": "[format('st{0}', variables('rgIdHash'))]",
      "location": "[parameters('location')]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS"
      },
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "allowBlobPublicAccess": false
      }
    },
    {
      "condition": "[equals(parameters('memoryStore'), 'Qdrant')]",
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-03-01",
      "name": "[format('asp-{0}-qdrant', variables('uniqueName'))]",
      "location": "[parameters('location')]",
      "kind": "linux",
      "sku": {
        "name": "P1v3"
      },
      "properties": {
        "reserved": true
      }
    },
    {
      "condition": "[equals(parameters('memoryStore'), 'Qdrant')]",
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-09-01",
      "name": "[format('app-{0}-qdrant', variables('uniqueName'))]",
      "location": "[parameters('location')]",
      "kind": "app,linux,container",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('asp-{0}-qdrant', variables('uniqueName')))]",
        "httpsOnly": true,
        "reserved": true,
        "clientCertMode": "Required",
        "virtualNetworkSubnetId": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', variables('uniqueName'))), '2021-05-01').subnets[1].id]",
        "siteConfig": {
          "numberOfWorkers": 1,
          "linuxFxVersion": "DOCKER|qdrant/qdrant:latest",
          "alwaysOn": true,
          "vnetRouteAllEnabled": true,
          "ipSecurityRestrictions": [
            {
              "vnetSubnetResourceId": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', variables('uniqueName'))), '2021-05-01').subnets[0].id]",
              "action": "Allow",
              "priority": 300,
              "name": "Allow front vnet"
            },
            {
              "ipAddress": "Any",
              "action": "Deny",
              "priority": 2147483647,
              "name": "Deny all"
            }
          ],
          "azureStorageAccounts": {
            "aciqdrantshare": {
              "type": "AzureFiles",
              "accountName": "[if(equals(parameters('memoryStore'), 'Qdrant'), format('st{0}', variables('rgIdHash')), 'notdeployed')]",
              "shareName": "[variables('storageFileShareName')]",
              "mountPath": "/qdrant/storage",
              "accessKey": "[if(equals(parameters('memoryStore'), 'Qdrant'), listKeys(resourceId('Microsoft.Storage/storageAccounts', format('st{0}', variables('rgIdHash'))), '2022-09-01').keys[0].value, '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', format('asp-{0}-qdrant', variables('uniqueName')))]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('st{0}', variables('rgIdHash')))]",
        "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', variables('uniqueName')))]"
      ]
    },
    {
      "condition": "[equals(parameters('memoryStore'), 'AzureCognitiveSearch')]",
      "type": "Microsoft.Search/searchServices",
      "apiVersion": "2022-09-01",
      "name": "[format('acs-{0}', variables('uniqueName'))]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "basic"
      },
      "properties": {
        "replicaCount": 1,
        "partitionCount": 1
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2021-05-01",
      "name": "[format('vnet-{0}', variables('uniqueName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/16"
          ]
        },
        "subnets": [
          {
            "name": "webSubnet",
            "properties": {
              "addressPrefix": "10.0.1.0/24",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-webapi', variables('uniqueName')))]"
              },
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Web",
                  "locations": [
                    "*"
                  ]
                }
              ],
              "delegations": [
                {
                  "name": "delegation",
                  "properties": {
                    "serviceName": "Microsoft.Web/serverfarms"
                  }
                }
              ],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          },
          {
            "name": "qdrantSubnet",
            "properties": {
              "addressPrefix": "10.0.2.0/24",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-qdrant', variables('uniqueName')))]"
              },
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Web",
                  "locations": [
                    "*"
                  ]
                }
              ],
              "delegations": [
                {
                  "name": "delegation",
                  "properties": {
                    "serviceName": "Microsoft.Web/serverfarms"
                  }
                }
              ],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          },
          {
            "name": "postgresSubnet",
            "properties": {
              "addressPrefix": "10.0.3.0/24",
              "serviceEndpoints": [],
              "delegations": [],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-qdrant', variables('uniqueName')))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-webapi', variables('uniqueName')))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2022-11-01",
      "name": "[format('nsg-{0}-webapi', variables('uniqueName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowAnyHTTPSInbound",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2022-11-01",
      "name": "[format('nsg-{0}-qdrant', variables('uniqueName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": []
      }
    },
    {
      "type": "Microsoft.Web/sites/virtualNetworkConnections",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}/{1}', format('app-{0}-webapi', variables('uniqueName')), 'webSubnetConnection')]",
      "properties": {
        "vnetResourceId": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', variables('uniqueName'))), '2021-05-01').subnets[0].id]",
        "isSwift": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', format('app-{0}-webapi', variables('uniqueName')))]",
        "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', variables('uniqueName')))]"
      ]
    },
    {
      "condition": "[equals(parameters('memoryStore'), 'Qdrant')]",
      "type": "Microsoft.Web/sites/virtualNetworkConnections",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}/{1}', format('app-{0}-qdrant', variables('uniqueName')), 'qdrantSubnetConnection')]",
      "properties": {
        "vnetResourceId": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', variables('uniqueName'))), '2021-05-01').subnets[1].id]",
        "isSwift": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', format('app-{0}-qdrant', variables('uniqueName')))]",
        "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', variables('uniqueName')))]"
      ]
    },
    {
      "condition": "[parameters('deployCosmosDB')]",
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2023-04-15",
      "name": "[toLower(format('cosmos-{0}', variables('uniqueName')))]",
      "location": "[parameters('location')]",
      "kind": "GlobalDocumentDB",
      "properties": {
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session"
        },
        "locations": [
          {
            "locationName": "[parameters('location')]",
            "failoverPriority": 0,
            "isZoneRedundant": false
          }
        ],
        "databaseAccountOfferType": "Standard"
      }
    },
    {
      "condition": "[parameters('deployCosmosDB')]",
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2023-04-15",
      "name": "[format('{0}/{1}', toLower(format('cosmos-{0}', variables('uniqueName'))), 'CopilotChat')]",
      "properties": {
        "resource": {
          "id": "CopilotChat"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(format('cosmos-{0}', variables('uniqueName'))))]"
      ]
    },
    {
      "condition": "[parameters('deployCosmosDB')]",
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2023-04-15",
      "name": "[format('{0}/{1}/{2}', toLower(format('cosmos-{0}', variables('uniqueName'))), 'CopilotChat', 'chatmessages')]",
      "properties": {
        "resource": {
          "id": "chatmessages",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "partitionKey": {
            "paths": [
              "/id"
            ],
            "kind": "Hash",
            "version": 2
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', toLower(format('cosmos-{0}', variables('uniqueName'))), 'CopilotChat')]"
      ]
    },
    {
      "condition": "[parameters('deployCosmosDB')]",
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2023-04-15",
      "name": "[format('{0}/{1}/{2}', toLower(format('cosmos-{0}', variables('uniqueName'))), 'CopilotChat', 'chatsessions')]",
      "properties": {
        "resource": {
          "id": "chatsessions",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "partitionKey": {
            "paths": [
              "/id"
            ],
            "kind": "Hash",
            "version": 2
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', toLower(format('cosmos-{0}', variables('uniqueName'))), 'CopilotChat')]"
      ]
    },
    {
      "condition": "[parameters('deployCosmosDB')]",
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2023-04-15",
      "name": "[format('{0}/{1}/{2}', toLower(format('cosmos-{0}', variables('uniqueName'))), 'CopilotChat', 'chatparticipants')]",
      "properties": {
        "resource": {
          "id": "chatparticipants",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "partitionKey": {
            "paths": [
              "/id"
            ],
            "kind": "Hash",
            "version": 2
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', toLower(format('cosmos-{0}', variables('uniqueName'))), 'CopilotChat')]"
      ]
    },
    {
      "condition": "[parameters('deployCosmosDB')]",
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2023-04-15",
      "name": "[format('{0}/{1}/{2}', toLower(format('cosmos-{0}', variables('uniqueName'))), 'CopilotChat', 'chatmemorysources')]",
      "properties": {
        "resource": {
          "id": "chatmemorysources",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "partitionKey": {
            "paths": [
              "/id"
            ],
            "kind": "Hash",
            "version": 2
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', toLower(format('cosmos-{0}', variables('uniqueName'))), 'CopilotChat')]"
      ]
    },
    {
      "condition": "[equals(parameters('memoryStore'), 'Postgres')]",
      "type": "Microsoft.DBforPostgreSQL/serverGroupsv2",
      "apiVersion": "2022-11-08",
      "name": "[format('pg-{0}', variables('uniqueName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "postgresqlVersion": "15",
        "administratorLoginPassword": "[parameters('sqlAdminPassword')]",
        "enableHa": false,
        "coordinatorVCores": 1,
        "coordinatorServerEdition": "BurstableMemoryOptimized",
        "coordinatorStorageQuotaInMb": 32768,
        "nodeVCores": 4,
        "nodeCount": 0,
        "nodeStorageQuotaInMb": 524288,
        "nodeEnablePublicIpAccess": false
      }
    },
    {
      "condition": "[equals(parameters('memoryStore'), 'Postgres')]",
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "privatelink.postgres.cosmos.azure.com",
      "location": "global"
    },
    {
      "condition": "[equals(parameters('memoryStore'), 'Postgres')]",
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2023-04-01",
      "name": "[format('pg-{0}-pe', variables('uniqueName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "subnet": {
          "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', variables('uniqueName'))), '2021-05-01').subnets[2].id]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "postgres",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.DBforPostgreSQL/serverGroupsv2', format('pg-{0}', variables('uniqueName')))]",
              "groupIds": [
                "coordinator"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.DBforPostgreSQL/serverGroupsv2', format('pg-{0}', variables('uniqueName')))]",
        "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', variables('uniqueName')))]"
      ]
    },
    {
      "condition": "[equals(parameters('memoryStore'), 'Postgres')]",
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', 'privatelink.postgres.cosmos.azure.com', format('pg-{0}-vnl', variables('uniqueName')))]",
      "location": "global",
      "properties": {
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', variables('uniqueName')))]"
        },
        "registrationEnabled": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.postgres.cosmos.azure.com')]",
        "[resourceId('Microsoft.Network/virtualNetworks', format('vnet-{0}', variables('uniqueName')))]"
      ]
    },
    {
      "condition": "[equals(parameters('memoryStore'), 'Postgres')]",
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2023-04-01",
      "name": "[format('{0}/default', format('pg-{0}-pe', variables('uniqueName')))]",
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "postgres",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.postgres.cosmos.azure.com')]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.postgres.cosmos.azure.com')]",
        "[resourceId('Microsoft.Network/privateEndpoints', format('pg-{0}-pe', variables('uniqueName')))]"
      ]
    },
    {
      "condition": "[parameters('deploySpeechServices')]",
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2022-12-01",
      "name": "[format('cog-{0}', variables('uniqueName'))]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "S0"
      },
      "kind": "SpeechServices",
      "identity": {
        "type": "None"
      },
      "properties": {
        "customSubDomainName": "[format('cog-{0}', variables('uniqueName'))]",
        "networkAcls": {
          "defaultAction": "Allow"
        },
        "publicNetworkAccess": "Enabled"
      }
    },
    {
      "type": "Microsoft.Web/staticSites",
      "apiVersion": "2022-09-01",
      "name": "[format('swa-{0}', variables('uniqueName'))]",
      "location": "[parameters('webappLocation')]",
      "properties": {
        "provider": "None"
      },
      "sku": {
        "name": "Free",
        "tier": "Free"
      }
    }
  ],
  "outputs": {
    "webappUrl": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Web/staticSites', format('swa-{0}', variables('uniqueName'))), '2022-09-01').defaultHostname]"
    },
    "webappName": {
      "type": "string",
      "value": "[format('swa-{0}', variables('uniqueName'))]"
    },
    "webapiUrl": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Web/sites', format('app-{0}-webapi', variables('uniqueName'))), '2022-09-01').defaultHostName]"
    },
    "webapiName": {
      "type": "string",
      "value": "[format('app-{0}-webapi', variables('uniqueName'))]"
    }
  }
}