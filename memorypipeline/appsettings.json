{
  //
  // Semantic Memory configuration - https://github.com/microsoft/semantic-memory
  // - ContentStorageType is the storage configuration for memory transfer: "AzureBlobs" or "SimpleFileStorage"
  // - TextGeneratorType is the AI completion service configuration: "AzureOpenAIText" or "OpenAI"
  // - ImageOcrType is the image OCR configuration: "None" or "AzureFormRecognizer" or "Tesseract"
  // - DataIngestion is the configuration section for data ingestion pipelines.
  // - Retrieval is the configuration section for memory retrieval.
  // - Services is the configuration sections for various memory settings.
  //
  "KernelMemory": {
    "ContentStorageType": "SimpleFileStorage",
    "TextGeneratorType": "AzureOpenAIText",
    "ImageOcrType": "None",
    // Data ingestion pipelines configuration.
    // - OrchestrationType is the pipeline orchestration configuration : "InProcess" or "Distributed"
    //      InProcess: in process .NET orchestrator, synchronous/no queues
    //      Distributed: asynchronous queue based orchestrator
    // - DistributedOrchestration is the detailed configuration for OrchestrationType=Distributed
    // - EmbeddingGeneratorTypes is the list of embedding generator types
    // - VectorDbTypes is the list of vector database types
    "DataIngestion": {
      "OrchestrationType": "Distributed",
      //
      // Detailed configuration for OrchestrationType=Distributed.
      // - QueueType is the queue configuration: "AzureQueue" or "RabbitMQ" or "SimpleQueues"
      //
      "DistributedOrchestration": {
        "QueueType": "SimpleQueues"
      },
      // Multiple generators can be used, e.g. for data migration, A/B testing, etc.
      "EmbeddingGeneratorTypes": [
        "AzureOpenAIEmbedding"
      ],
      // Vectors can be written to multiple storages, e.g. for data migration, A/B testing, etc.
      "VectorDbTypes": [
        "SimpleVectorDb"
      ]
    },
    //
    // Memory retrieval configuration - A single EmbeddingGenerator and VectorDb.
    // - VectorDbType: Vector database configuration: "SimpleVectorDb" or "AzureCognitiveSearch" or "Qdrant"
    // - EmbeddingGeneratorType: Embedding generator configuration: "AzureOpenAIEmbedding" or "OpenAI"
    //
    "Retrieval": {
      "VectorDbType": "SimpleVectorDb",
      "EmbeddingGeneratorType": "AzureOpenAIEmbedding"
    },
    //
    // Configuration for the various services used by semantic memory and semantic kernel.
    // Section names correspond to type specified in SemanticMemory section.  All supported
    // sections are listed below for reference.  Only referenced sections are required.
    //
    "Services": {
      //
      // File based storage for local/development use.
      // - Directory is the location where files are stored.
      //
      "SimpleFileStorage": {
        "Directory": "../tmp/cache"
      },
      //
      // File based queue for local/development use.
      // - Directory is the location where messages are stored.
      //
      "SimpleQueues": {
        "Directory": "../tmp/queues"
      },
      //
      // File based vector database for local/development use.
      // - StorageType is the storage configuration: "Disk" or "Volatile"
      // - Directory is the location where data is stored.
      //
      "SimpleVectorDb": {
        "StorageType": "Disk",
        "Directory": "../tmp/database"
      },
      //
      // Azure blob storage for the memory pipeline
      // - Auth is the authentication type: "ConnectionString" or "AzureIdentity".
      // - ConnectionString is the connection string for the Azure Storage account and only utilized when Auth=ConnectionString.
      // - Account is the name of the Azure Storage account and only utilized when Auth=AzureIdentity.
      // - Container is the name of the Azure Storage container used for file storage.
      // - EndpointSuffix is used only for country clouds.
      //
      "AzureBlobs": {
        "Auth": "ConnectionString",
        //"ConnectionString": "", // dotnet user-secrets set "SemanticMemory:Services:AzureBlobs:ConnectionString" "MY_AZUREBLOB_CONNECTIONSTRING"
        //"Account": "",
        "Container": "memorypipeline"
        //"EndpointSuffix": "core.windows.net"
      },
      //
      // Azure storage queue configuration for distributed memory pipeline
      // - Auth is the authentication type: "ConnectionString" or "AzureIdentity".
      // - ConnectionString is the connection string for the Azure Storage account and only utilized when Auth=ConnectionString.
      // - Account is the name of the Azure Storage account and only utilized when Auth=AzureIdentity.
      // - EndpointSuffix is used only for country clouds.
      //
      "AzureQueue": {
        "Auth": "ConnectionString"
        //"ConnectionString": "", // dotnet user-secrets set "SemanticMemory:Services:AzureQueue:ConnectionString" "MY_AZUREQUEUE_CONNECTIONSTRING"
        //"Account": "",
        //"EndpointSuffix": "core.windows.net"
      },
      //
      // RabbitMq queue configuration for distributed memory pipeline
      // - Username is the RabbitMq user name.
      // - Password is the RabbitMq use password
      // - Host is the RabbitMq service host name or address.
      // - Port is the RabbitMq service port.
      //
      "RabbitMq": {
        //"Username": "user", // dotnet user-secrets set "SemanticMemory:Services:RabbitMq:Username" "MY_RABBITMQ_USER"
        //"Password": "", // dotnet user-secrets set "SemanticMemory:Services:RabbitMq:Password" "MY_RABBITMQ_KEY"
        "Host": "127.0.0.1",
        "Port": "5672"
      },
      //
      // Azure Cognitive Search configuration for semantic services.
      // - Auth is the authentication type: "APIKey" or "AzureIdentity".
      // - APIKey is the key generated to access the service.
      // - Endpoint is the service endpoint url.
      //
      "AzureCognitiveSearch": {
        "Auth": "ApiKey",
        //"APIKey": "", // dotnet user-secrets set "SemanticMemory:Services:AzureCognitiveSearch:APIKey" "MY_ACS_KEY"
        "Endpoint": ""
      },
      //
      // Qdrant configuration for semantic services.
      // - APIKey is the key generated to access the service.
      // - Endpoint is the service endpoint url.
      //
      "Qdrant": {
        //"APIKey": "", // dotnet user-secrets set "SemanticMemory:Services:Qdrant:APIKey" "MY_QDRANT_KEY"
        "Endpoint": "http://127.0.0.1:6333"
      },
      //
      // AI completion configuration for Azure AI services.
      // - Auth is the authentication type: "APIKey" or "AzureIdentity".
      // - APIKey is the key generated to access the service.
      // - Endpoint is the service endpoint url.
      // - Deployment is a completion model (e.g., gpt-35-turbo, gpt-4).
      // - APIType is the type of completion model: "ChatCompletion" or "TextCompletion".
      // - MaxRetries is the maximum number of retries for a failed request.
      //
      "AzureOpenAIText": {
        "Auth": "ApiKey",
        //"APIKey": "", // dotnet user-secrets set "SemanticMemory:Services:AzureOpenAIText:APIKey" "MY_AZUREOPENAI_KEY"
        "Endpoint": "",
        "Deployment": "gpt-35-turbo",
        "APIType": "ChatCompletion",
        "MaxRetries": 10
      },
      //
      // AI embedding configuration for Azure OpenAI services.
      // - Auth is the authentication type: "APIKey" or "AzureIdentity".
      // - APIKey is the key generated to access the service.
      // - Endpoint is the service endpoint url.
      // - Deployment is a embedding model (e.g., gpt-35-turbo, gpt-4).
      //
      "AzureOpenAIEmbedding": {
        "Auth": "ApiKey",
        // "APIKey": "", // dotnet user-secrets set "SemanticMemory:Services:AzureOpenAIEmbedding:APIKey" "MY_AZUREOPENAI_KEY"
        "Endpoint": ".openai.azure.com/",
        "Deployment": "text-embedding-ada-002"
      },
      //
      // AI completion and embedding configuration for OpenAI services.
      // - TextModel is a completion model (e.g., gpt-35-turbo, gpt-4).
      // - EmbeddingModelSet is an embedding model (e.g., "text-embedding-ada-002").
      // - APIKey is the key generated to access the service.
      // - OrgId is the optional OpenAI organization id/key.
      // - MaxRetries is the maximum number of retries for a failed request.
      //
      "OpenAI": {
        "TextModel": "gpt-3.5-turbo",
        "EmbeddingModel": "text-embedding-ada-002",
        //"APIKey": "", // dotnet user-secrets set "SemanticMemory:Services:OpenAI:APIKey" "MY_OPENAI_KEY"
        "OrgId": "",
        "MaxRetries": 10
      },
      //
      // Azure Form Recognizer configuration for memory pipeline OCR.
      // - Auth is the authentication configuration: "APIKey" or "AzureIdentity".
      // - APIKey is the key generated to access the service.
      // - Endpoint is the service endpoint url.
      //
      "AzureFormRecognizer": {
        "Auth": "APIKey",
        //"APIKey": "", // dotnet user-secrets set "SemanticMemory:Services:AzureFormRecognizer:APIKey" "MY_AZUREFORMRECOGNIZER_KEY"
        "Endpoint": ""
      },
      //
      // Tesseract configuration for memory pipeline OCR.
      // - Language is the language supported by the data file.
      // - FilePath is the path to the data file.
      // 
      // Note: When using Tesseract OCR Support (In order to upload image file formats such as png, jpg and tiff):
      // 1. Obtain language data files here: https://github.com/tesseract-ocr/tessdata .
      // 2. Add these files to your `data` folder or the path specified in the "FilePath" property and set the "Copy to Output Directory" value to "Copy if newer".
      //
      "Tesseract": {
        "Language": "eng",
        "FilePath": "./data"
      }
    }
  },
  // Logging configuration
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    },
    "ApplicationInsights": {
      "LogLevel": {
        "Default": "Information"
      }
    }
  },
  "AllowedHosts": "*",
  // Application Insights configuration
  "ApplicationInsights": {
    "ConnectionString": null
  }
}